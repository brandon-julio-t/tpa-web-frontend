# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AssetFile {
  contentType: String!
  id: ID!
}

type Country {
  id: ID!
  name: String!
}

type FriendRequest {
  createdAt: Time!
  friend: User!
  id: ID!
  user: User!
}

type Game {
  banner: AssetFile!
  createdAt: Time!
  description: String!
  discount: Float!
  genre: GameGenre!
  id: ID!
  isInCart: Boolean!
  isInWishlist: Boolean!
  isInappropriate: Boolean!
  mostHelpfulReviews: [GameReview!]!
  price: Float!
  recentReviews: [GameReview!]!
  slideshows: [GameSlideshow!]!
  systemRequirements: String!
  tags: [GameTag!]!
  title: String!
}

type GameGenre {
  id: ID!
  name: String!
}

type GamePagination {
  data: [Game!]!
  totalPages: Int!
}

type GameReview {
  content: String!
  createdAt: Time!
  downVoters: [User!]!
  downVotes: Int!
  id: ID!
  isRecommended: Boolean!
  upVoters: [User!]!
  upVotes: Int!
  user: User!
}

type GameSlideshow {
  file: AssetFile!
  game: Game!
}

type GameTag {
  id: ID!
  name: String!
}

type Mutation {
  acceptFriendRequest(userId: ID!): User!
  addPrivateMessage(friendId: ID!, text: String!): PrivateMessage!
  addToCart(gameId: ID!): Game!
  addToWishlist(gameId: ID!): Game!
  approveUnsuspendRequests(id: ID!): User!
  checkoutWithCard: Float!
  checkoutWithWallet: Float!
  clearCart: Boolean!
  createGame(input: CreateGame!): Game!
  createProfileComment(comment: String!, profileId: ID!): ProfileComment!
  createPromo(discount: Float!, endAt: Time!): Promo!
  createReview(content: String!, gameId: ID!, isRecommended: Boolean!): GameReview!
  deleteGame(id: ID!): Game!
  deleteNotification(id: ID!): Notification!
  deleteProfileComment(id: ID!): ProfileComment!
  deletePromo(id: ID!): Promo!
  deleteReview(id: ID!): GameReview!
  denyUnsuspendRequests(id: ID!): User!
  downVoteReview(id: ID!): GameReview!
  giftWithCard(input: Gift!): Float!
  giftWithWallet(input: Gift!): Float!
  joinStream(accountName: String!, rtcAnswer: String!): String!
  login(accountName: String!, password: String!): User!
  logout: User!
  newIceCandidate(accountName: String!, candidate: String!): String!
  redeemWallet(code: String!): Boolean!
  register(accountName: String!, countryId: ID!, email: String!, password: String!): User!
  rejectFriendRequest(userId: ID!): User!
  removeFromCart(gameId: ID!): Game!
  removeFromWishlist(gameId: ID!): Game!
  sendFriendRequest(userId: ID!): User!
  sendOTP(email: String!): Boolean!
  startStreaming(rtcConnection: String!): String!
  stopStreaming: Boolean!
  submitReport(description: String!, userId: ID!): Report!
  suspendAccount(id: ID!): User!
  unsuspendRequest(accountName: String!): String!
  upVoteReview(id: ID!): GameReview!
  updateGame(input: UpdateGame!): Game!
  updateProfile(input: UpdateUser): User!
  updatePromo(discount: Float!, endAt: Time!, id: ID!): Promo!
  verifyOTP(otp: String!): Boolean!
}

type Notification {
  content: String!
  createdAt: Time!
  id: ID!
}

type PrivateMessage {
  createdAt: Time!
  id: ID!
  sender: User!
  text: String!
}

type ProfileComment {
  comment: String!
  createdAt: Time!
  id: ID!
  profile: User!
  user: User!
}

type Promo {
  discount: Float!
  endAt: Time!
  id: ID!
}

type PromoPagination {
  data: [Promo!]!
  totalPages: Int!
}

type Query {
  allCountries: [Country!]!
  auth: User
  communityRecommended: [Game!]!
  featuredAndRecommendedGames: [Game!]!
  games(page: Int!): GamePagination!
  genres: [GameGenre!]!
  getAllGameTags: [GameTag!]!
  getAllUnsuspendRequests: [User!]!
  getGameById(id: ID!): Game!
  getProfile(customUrl: String!): User!
  getReportsByUser(id: ID!): [Report!]!
  newAndTrending: [Game!]!
  notificationById(id: ID!): Notification!
  privateMessage(friendId: ID!): [PrivateMessage!]!
  profileComments(profileId: ID!): [ProfileComment!]!
  promo(id: ID!): Promo!
  promos(page: Int!): PromoPagination!
  refreshToken: Boolean!
  searchGames(category: String!, genres: [ID!]!, keyword: String!, page: Int!, price: Int!): GamePagination!
  specialOffersGame: [Game!]!
  specials: [Game!]!
  streams: [String!]!
  topSellers: [Game!]!
  user(accountName: String!): User!
  userByFriendCode(code: String!): User!
  users(page: Int!): UserPagination!
}

type Report {
  createdAt: Time!
  description: String!
  id: ID!
  reported: User!
  reporter: User!
}

type Subscription {
  onNewIceCandidate(accountName: String!): String!
  onStreamJoin: String!
  privateMessageAdded: PrivateMessage!
}

type User {
  accountName: String!
  cart: [Game!]!
  cartCount: Int!
  country: Country!
  customUrl: String!
  displayName: String!
  email: String!
  friendCode: String!
  friends: [User!]!
  id: ID!
  ingoingFriendRequests: [User!]!
  notifications: [Notification!]!
  outgoingFriendRequests: [User!]!
  profilePicture: AssetFile!
  profileTheme: String!
  realName: String!
  receivedGiftsCount: Int!
  receivedInvitesCount: Int!
  receivedMessagesCount: Int!
  receivedProfileCommentsCount: Int!
  reportCounts: Int!
  stream: String!
  summary: String!
  suspendedAt: Time
  walletBalance: Float!
  wishlist: [Game!]!
  wishlistCount: Int!
}

type UserPagination {
  data: [User!]!
  totalPages: Int!
}

input CreateGame {
  banner: Upload!
  description: String!
  gameTags: [ID!]!
  genreId: ID!
  isInappropriate: Boolean!
  price: Float!
  slideshows: [Upload!]!
  systemRequirements: String!
  title: String!
}

input Gift {
  firstName: String!
  message: String!
  sentiment: String!
  signature: String!
  userId: ID!
}

input UpdateGame {
  banner: Upload
  description: String!
  gameTags: [ID!]!
  genreId: ID!
  id: ID!
  isInappropriate: Boolean!
  price: Float!
  slideshows: [Upload]
  systemRequirements: String!
  title: String!
}

input UpdateUser {
  avatar: Upload
  countryId: ID!
  customUrl: String!
  displayName: String!
  profileTheme: String!
  realName: String!
  summary: String!
}


scalar Time

scalar Upload
